window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pyviewfactor", "modulename": "pyviewfactor", "type": "module", "doc": "<h1 id=\"pyviewfactor\">PyViewFactor</h1>\n\n<p><a href=\"https://gitlab.com/arep-dev/pyViewFactor/-/releases\"><img src=\"https://gitlab.com/arep-dev/pyViewFactor/-/badges/release.svg\" alt=\"Latest Release\" /></a> \n <a href=\"https://opensource.org/licenses/MIT\"><img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" alt=\"License: MIT\" /></a>\n <a href=\"https://pypi.org/project/pyviewfactor/\"><img src=\"https://img.shields.io/pypi/v/pyviewfactor\" alt=\"Pypi Version\" /></a>\n <a href=\"https://pypi.org/project/pyvista/\"><img src=\"https://img.shields.io/pypi/dm/pyviewfactor.svg?label=pypi%20downloads\" alt=\"Pypi Downloads\" /></a></p>\n\n<p>A python library to compute exact view factors between planar faces. </p>\n\n<p>This code computes the radiation view factor between polygons using the double contour integral method described in <a href=\"https://www.academia.edu/download/77459051/Viewfactor_paper_IJHMT.pdf\">(Mazumder and Ravishankar 2012)</a> and <a href=\"https://hal.archives-ouvertes.fr/tel-01734545/\">(Schmid 2016)</a>.</p>\n\n<p>It uses the handy <a href=\"https://docs.pyvista.org/\">Pyvista</a> package to deal with geometrical aspects of such problems.</p>\n\n<h2 id=\"how-does-it-work\">How does it work?</h2>\n\n<ul>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> Use <a href=\"https://docs.pyvista.org/index.html\">pyvista</a> to import your geometry (*.stl, *.vtk, *.obj, ...) or alternately draw it with the same package.</li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> Optionally check that the faces can \"see\" each other with <code>get_visibility(face1, face2)</code></li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> Optionally check that no obstruction lies between them <code>get_visibility_obstruction(face1, face2, obstacle)</code></li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> Compute the view factor from <code>face2</code> to <code>face1</code> with <code>compute_view_factor(face1, face2)</code>: Done!</li>\n</ul>\n\n<h2 id=\"minimum-working-example-facet-to-facet-view-factor-computation\">Minimum working example : facet to facet view factor computation</h2>\n\n<p>Suppose we want to compute the radiation view factor between a triangle and a rectangle.</p>\n\n<p><img src=\"https://gitlab.com/arep-dev/pyViewFactor/-/raw/64e19ed126bbfd1bc2bff1197b1dee23d35c7836/img/mwe.png?raw=true\" alt=\"Triangle and rectangle configuration\" width=\"260\"/></p>\n\n<p>You are now 18 lines of code away from your first view factor computation:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">pyvista</span> <span class=\"k\">as</span> <span class=\"nn\">pv</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyviewfactor</span> <span class=\"k\">as</span> <span class=\"nn\">pvf</span>\n\n<span class=\"c1\"># first define a rectangle...</span>\n<span class=\"n\">pointa</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> \n<span class=\"n\">pointb</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">pointc</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">pointd</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">rectangle</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span><span class=\"p\">([</span><span class=\"n\">pointa</span><span class=\"p\">,</span> <span class=\"n\">pointb</span><span class=\"p\">,</span> <span class=\"n\">pointc</span><span class=\"p\">,</span> <span class=\"n\">pointd</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># ... then a triangle</span>\n<span class=\"n\">pointa</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span> \n<span class=\"n\">pointb</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">pointc</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">liste_pts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">pointa</span><span class=\"p\">,</span> <span class=\"n\">pointb</span><span class=\"p\">,</span> <span class=\"n\">pointc</span><span class=\"p\">]</span>\n<span class=\"n\">liste_pts</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()</span> <span class=\"c1\"># let us put the normal the other way around (facing the rectangle)</span>\n<span class=\"n\">triangle</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Triangle</span><span class=\"p\">(</span><span class=\"n\">liste_pts</span><span class=\"p\">)</span> <span class=\"c1\"># ... done with geometry.</span>\n\n<span class=\"c1\"># preliminary check for visibility</span>\n<span class=\"k\">if</span> <span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">get_visibility</span><span class=\"p\">(</span><span class=\"n\">rectangle</span> <span class=\"p\">,</span> <span class=\"n\">triangle</span><span class=\"p\">):</span>\n    <span class=\"n\">F</span> <span class=\"o\">=</span> <span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">compute_viewfactor</span><span class=\"p\">(</span><span class=\"n\">rectangle</span><span class=\"p\">,</span> <span class=\"n\">triangle</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;View factor from triangle to rectangle = &quot;</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Not facing each other&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>You usually get your geometry from a different format? (*.idf, *.dat, ...)</p>\n\n<p>Check pyvista's documentation on <a href=\"https://docs.pyvista.org/examples/00-load/create-poly.html\">how to generate a PolyData facet from points</a>.</p>\n\n<h2 id=\"example-with-a-closed-geometry-and-the-vtk-file-format\">Example with a closed geometry and the VTK file format</h2>\n\n<p>We will now compute the view factors within a more complex geometry: a  closed sphere (clipped in half below), with inwards facing normals, so the faces can \"see\" each other. Note that the face-to-face visibility is unobstructed (for obstructed geometries, see next section).</p>\n\n<p>The field of view factors from one facet to all others will be computed and stored in a VTK file, which you can explore with the open source <a href=\"https://www.paraview.org/download/\">Paraview software</a>.</p>\n\n<p><img src=\"https://gitlab.com/arep-dev/pyViewFactor/-/raw/73249e2093b207d5030d9b6637603c4b77b2374c/img/demi_sphere.png?raw=true\" alt=\"Sphere\" width=\"350\"/></p>\n\n<p>Following snippet can be reused as a kick-start for your own purposes:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">pyvista</span> <span class=\"k\">as</span> <span class=\"nn\">pv</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyviewfactor</span> <span class=\"kn\">import</span>  <span class=\"n\">compute_viewfactor</span><span class=\"p\">,</span> <span class=\"n\">fc_unstruc2poly</span> <span class=\"c1\"># viewfactor + a useful conversion function</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tqdm</span> <span class=\"kn\">import</span> <span class=\"n\">tqdm</span> <span class=\"c1\"># for a fancy progress bar</span>\n\n<span class=\"c1\"># create a raw sphere with pyvista</span>\n<span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Sphere</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">center</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">direction</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n                 <span class=\"n\">theta_resolution</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">phi_resolution</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"c1\"># and put the normals inwards please</span>\n<span class=\"n\">sphere</span><span class=\"o\">.</span><span class=\"n\">flip_normals</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># let us chose a cell to compute view factors from</span>\n<span class=\"n\">chosen_face</span> <span class=\"o\">=</span> <span class=\"n\">sphere</span><span class=\"o\">.</span><span class=\"n\">extract_cells</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"c1\"># convert the face from UnstructuredGrid to PolyData</span>\n<span class=\"n\">chosen_face</span> <span class=\"o\">=</span> <span class=\"n\">fc_unstruc2poly</span><span class=\"p\">(</span><span class=\"n\">chosen_face</span><span class=\"p\">)</span>\n<span class=\"c1\"># &quot;one array to contain them all&quot; -&gt; the results will be stored there</span>\n<span class=\"n\">F</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"o\">.</span><span class=\"n\">n_cells</span><span class=\"p\">)</span> \n\n<span class=\"c1\"># now let us compute the view factor to all other faces</span>\n<span class=\"c1\"># (with a fancy progress bar, iterating over the mesh&#39;s faces)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"o\">.</span><span class=\"n\">n_cells</span><span class=\"p\">),</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"o\">.</span><span class=\"n\">n_cells</span><span class=\"p\">):</span>\n    <span class=\"n\">face</span> <span class=\"o\">=</span> <span class=\"n\">sphere</span><span class=\"o\">.</span><span class=\"n\">extract_cells</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"c1\"># other facet</span>\n    <span class=\"n\">face</span> <span class=\"o\">=</span> <span class=\"n\">fc_unstruc2poly</span><span class=\"p\">(</span><span class=\"n\">face</span><span class=\"p\">)</span> <span class=\"c1\"># convert to PolyData</span>\n    <span class=\"n\">F</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">compute_viewfactor</span><span class=\"p\">(</span><span class=\"n\">face</span><span class=\"p\">,</span> <span class=\"n\">chosen_face</span><span class=\"p\">)</span> <span class=\"c1\"># compute VF</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Complementarity check: </span><span class=\"se\">\\n</span><span class=\"s2\"> (e.g. is \\sum_{i=0}^n F_i =? 1)&quot;</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># put the scalar values in the geometry</span>\n<span class=\"n\">sphere</span><span class=\"o\">.</span><span class=\"n\">cell_data</span><span class=\"p\">[</span><span class=\"s2\">&quot;F&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">F</span>\n<span class=\"n\">sphere</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s2\">&quot;./sphere.vtk&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># ... and save.</span>\n</code></pre></div>\n\n<p>The results look as per following images showing the view factor from the chosen cell to all others.</p>\n\n<p><img src=\"https://gitlab.com/arep-dev/pyViewFactor/-/raw/3ac896fe2f420443c7c96eaa9dbbb955474e80d5/img/F_sphere.png?raw=true\" alt=\"VF to other faces inside the sphere\" width=\"240\"/>\n<img src=\"https://gitlab.com/arep-dev/pyViewFactor/-/raw/3ac896fe2f420443c7c96eaa9dbbb955474e80d5/img/F_sphere_clip.png?raw=true\" alt=\"Clipped result\" width=\"240\"/></p>\n\n<h2 id=\"computing-the-view-factors-of-a-wall-in-its-built-environment\">Computing the view factors of a wall in its built environment</h2>\n\n<p>For building simulation purposes, it may prove to be useful to compute the ground and sky view factors of a given wall, or the view factor of the wall to other walls in the built environment. In following example (available in the \"examples\" folder), we compute the view factors of the environment of the purple wall depicted below.</p>\n\n<p><img src=\"https://gitlab.com/arep-dev/pyViewFactor/-/raw/3ac896fe2f420443c7c96eaa9dbbb955474e80d5/img/wall_view_factors.png?raw=true\" alt=\"View factors in built environment\" width=\"430\"/></p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyvista</span> <span class=\"k\">as</span> <span class=\"nn\">pv</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tqdm</span> <span class=\"kn\">import</span> <span class=\"n\">tqdm</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyviewfactor</span> <span class=\"k\">as</span> <span class=\"nn\">pvf</span>\n\n<span class=\"c1\"># read the geometry</span>\n<span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s2\">&quot;./built_envmt.vtk&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">meshpoly</span> <span class=\"o\">=</span> <span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">fc_unstruc2poly</span><span class=\"p\">(</span><span class=\"n\">mesh</span><span class=\"p\">)</span> <span class=\"c1\"># convert to polydata for obstruction check</span>\n\n<span class=\"c1\"># identify who is who</span>\n<span class=\"n\">i_wall</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">mesh</span><span class=\"p\">[</span><span class=\"s2\">&quot;wall_names&quot;</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"s1\">&#39;wall&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">i_sky</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">mesh</span><span class=\"p\">[</span><span class=\"s2\">&quot;wall_names&quot;</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"s1\">&#39;sky&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">i_building1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">mesh</span><span class=\"p\">[</span><span class=\"s2\">&quot;wall_names&quot;</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"s1\">&#39;building1&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">i_building2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">mesh</span><span class=\"p\">[</span><span class=\"s2\">&quot;wall_names&quot;</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"s1\">&#39;building2&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># get the different elements</span>\n<span class=\"n\">wall</span> <span class=\"o\">=</span> <span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">extract_cells</span><span class=\"p\">(</span><span class=\"n\">i_wall</span><span class=\"p\">)</span>\n<span class=\"n\">sky</span> <span class=\"o\">=</span> <span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">extract_cells</span><span class=\"p\">(</span><span class=\"n\">i_sky</span><span class=\"p\">)</span>\n<span class=\"n\">building1</span> <span class=\"o\">=</span> <span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">extract_cells</span><span class=\"p\">(</span><span class=\"n\">i_building1</span><span class=\"p\">)</span>\n<span class=\"n\">building2</span> <span class=\"o\">=</span> <span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">extract_cells</span><span class=\"p\">(</span><span class=\"n\">i_building2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># convert to polydata</span>\n<span class=\"n\">wall</span> <span class=\"o\">=</span> <span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">fc_unstruc2poly</span><span class=\"p\">(</span><span class=\"n\">wall</span><span class=\"p\">)</span>\n\n<span class=\"n\">Fsky</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"c1\"># for all cells constituting the ensemble</span>\n<span class=\"k\">for</span> <span class=\"n\">patch</span> <span class=\"ow\">in</span> <span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"n\">i_sky</span><span class=\"p\">):</span>\n    <span class=\"n\">sky</span> <span class=\"o\">=</span> <span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">extract_cells</span><span class=\"p\">(</span><span class=\"n\">patch</span><span class=\"p\">)</span> <span class=\"c1\"># extract one cell</span>\n    <span class=\"n\">sky</span> <span class=\"o\">=</span> <span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">fc_unstruc2poly</span><span class=\"p\">(</span><span class=\"n\">sky</span><span class=\"p\">)</span> <span class=\"c1\"># convert to polydata</span>\n    <span class=\"k\">if</span> <span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">get_visibility</span><span class=\"p\">(</span><span class=\"n\">sky</span><span class=\"p\">,</span> <span class=\"n\">wall</span><span class=\"p\">):</span> <span class=\"c1\"># if the can see each other...</span>\n        <span class=\"k\">if</span> <span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">get_visibility_raytrace</span><span class=\"p\">(</span><span class=\"n\">sky</span><span class=\"p\">,</span> <span class=\"n\">wall</span><span class=\"p\">,</span> <span class=\"n\">meshpoly</span><span class=\"p\">):</span> <span class=\"c1\"># ... if no obstruction</span>\n            <span class=\"n\">Fsky</span> <span class=\"o\">+=</span> <span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">compute_viewfactor</span><span class=\"p\">(</span><span class=\"n\">sky</span><span class=\"p\">,</span> <span class=\"n\">wall</span><span class=\"p\">)</span> <span class=\"c1\"># compute and increment view factor : F_i-&gt;(j+k) = F_i-&gt;j + F_i-&gt;k</span>\n\n<span class=\"c1\"># same for building 1</span>\n<span class=\"n\">Fbuilding1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">for</span> <span class=\"n\">patch</span> <span class=\"ow\">in</span> <span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"n\">i_building1</span><span class=\"p\">):</span>\n    <span class=\"n\">bldng1</span> <span class=\"o\">=</span> <span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">extract_cells</span><span class=\"p\">(</span><span class=\"n\">patch</span><span class=\"p\">)</span>\n    <span class=\"n\">bldng1</span> <span class=\"o\">=</span> <span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">fc_unstruc2poly</span><span class=\"p\">(</span><span class=\"n\">bldng1</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">get_visibility</span><span class=\"p\">(</span><span class=\"n\">bldng1</span><span class=\"p\">,</span> <span class=\"n\">wall</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">get_visibility_raytrace</span><span class=\"p\">(</span><span class=\"n\">bldng1</span><span class=\"p\">,</span> <span class=\"n\">wall</span><span class=\"p\">,</span> <span class=\"n\">meshpoly</span><span class=\"p\">):</span>\n            <span class=\"n\">Fbuilding1</span> <span class=\"o\">+=</span> <span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">compute_viewfactor</span><span class=\"p\">(</span><span class=\"n\">bldng1</span><span class=\"p\">,</span> <span class=\"n\">wall</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># same for building 2</span>\n<span class=\"n\">Fbuilding2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">for</span> <span class=\"n\">patch</span> <span class=\"ow\">in</span> <span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"n\">i_building2</span><span class=\"p\">):</span>\n    <span class=\"n\">bldng2</span> <span class=\"o\">=</span> <span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">extract_cells</span><span class=\"p\">(</span><span class=\"n\">patch</span><span class=\"p\">)</span>\n    <span class=\"n\">bldng2</span> <span class=\"o\">=</span> <span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">fc_unstruc2poly</span><span class=\"p\">(</span><span class=\"n\">bldng2</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">get_visibility</span><span class=\"p\">(</span><span class=\"n\">bldng2</span><span class=\"p\">,</span> <span class=\"n\">wall</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">get_visibility_raytrace</span><span class=\"p\">(</span><span class=\"n\">bldng2</span><span class=\"p\">,</span> <span class=\"n\">wall</span><span class=\"p\">,</span> <span class=\"n\">meshpoly</span><span class=\"p\">):</span>\n            <span class=\"n\">Fbuilding2</span> <span class=\"o\">+=</span> <span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">compute_viewfactor</span><span class=\"p\">(</span><span class=\"n\">bldng2</span><span class=\"p\">,</span> <span class=\"n\">wall</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># complementarity implies \\sigma F_i = 1 : compute viewfactor to ground</span>\n<span class=\"n\">Fground</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">Fbuilding1</span><span class=\"o\">-</span><span class=\"n\">Fbuilding2</span><span class=\"o\">-</span><span class=\"n\">Fsky</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">----------------------&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Wall to environment view factors :&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Sky &#39;</span><span class=\"p\">,</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">Fsky</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Building 1 &#39;</span><span class=\"p\">,</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">Fbuilding1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Building 2 &#39;</span><span class=\"p\">,</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">Fbuilding2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Ground view factor :&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Ground &#39;</span><span class=\"p\">,</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">Fground</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n</code></pre></div>\n\n<p>The code yields following view factors :</p>\n\n<pre><code>F_{\\text{sky}} = 0.345 \\\\\nF_{\\text{ground}} = 0.373 \\\\\nF_{\\text{building1}} = 0.251 \\\\\nF_{\\text{building2}} = 0.031 \\\\\n</code></pre>\n\n<h2 id=\"understanding-the-obstruction-check-function\">Understanding the obstruction check function</h2>\n\n<p>In real life problems, obstacles may well hinder the radiation heat transfer between surfaces. We make use here of <a href=\"https://docs.pyvista.org/examples/01-filter/poly-ray-trace.html\">pyvista's raytrace function</a> to perform obstruction tests, as per following example, much inspired from pyvista's online documentation.</p>\n\n<p><img src=\"https://gitlab.com/arep-dev/pyViewFactor/-/raw/3ac896fe2f420443c7c96eaa9dbbb955474e80d5/img/intersection_simple.png?raw=true\" alt=\"Obstruction check between rectangles\" width=\"350\"/></p>\n\n<p>The code snippet below shows how the ray tracing function works and allows to understand its usage in the pyviewfactor <code>get_visibility_raytrace</code> function.</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">pyvista</span> <span class=\"k\">as</span> <span class=\"nn\">pv</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyviewfactor</span> <span class=\"kn\">import</span> <span class=\"n\">get_visibility_raytrace</span>\n<span class=\"c1\"># let us first create two rectangles</span>\n<span class=\"n\">pointa</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">pointb</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">pointc</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">pointd</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">rectangle_down</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span><span class=\"p\">([</span><span class=\"n\">pointa</span><span class=\"p\">,</span> <span class=\"n\">pointb</span><span class=\"p\">,</span> <span class=\"n\">pointc</span><span class=\"p\">,</span> <span class=\"n\">pointd</span><span class=\"p\">])</span>\n<span class=\"n\">pointa</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">pointb</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">pointc</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">pointd</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">rectangle_up</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Rectangle</span><span class=\"p\">([</span><span class=\"n\">pointa</span><span class=\"p\">,</span> <span class=\"n\">pointb</span><span class=\"p\">,</span> <span class=\"n\">pointc</span><span class=\"p\">,</span> <span class=\"n\">pointd</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># a circle will be the obstruction</span>\n<span class=\"n\">z_translation</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">2</span>\n<span class=\"n\">obstacle</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Circle</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"c1\"># we translate the obstruction right between both rectangles</span>\n<span class=\"n\">obstacle</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">z_translation</span><span class=\"p\">],</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># Define line segment</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">rectangle_down</span><span class=\"o\">.</span><span class=\"n\">cell_centers</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">points</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">stop</span> <span class=\"o\">=</span> <span class=\"n\">rectangle_up</span><span class=\"o\">.</span><span class=\"n\">cell_centers</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">points</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"c1\"># Perform ray trace</span>\n<span class=\"n\">points</span><span class=\"p\">,</span> <span class=\"n\">ind</span> <span class=\"o\">=</span> <span class=\"n\">obstacle</span><span class=\"o\">.</span><span class=\"n\">ray_trace</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create geometry to represent ray trace</span>\n<span class=\"n\">ray</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Line</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">)</span>\n<span class=\"n\">intersection</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">PolyData</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Render the result</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Plotter</span><span class=\"p\">(</span><span class=\"n\">notebook</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_mesh</span><span class=\"p\">(</span><span class=\"n\">obstacle</span><span class=\"p\">,</span> <span class=\"n\">show_edges</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">&quot;red&quot;</span><span class=\"p\">,</span> <span class=\"n\">lighting</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">&quot;obstacle&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_mesh</span><span class=\"p\">(</span><span class=\"n\">rectangle_up</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">&quot;blue&quot;</span><span class=\"p\">,</span> <span class=\"n\">line_width</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">&quot;rect up&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_mesh</span><span class=\"p\">(</span><span class=\"n\">rectangle_down</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">&quot;yellow&quot;</span><span class=\"p\">,</span> <span class=\"n\">line_width</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">&quot;rect down&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_mesh</span><span class=\"p\">(</span><span class=\"n\">ray</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">&quot;green&quot;</span><span class=\"p\">,</span> <span class=\"n\">line_width</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">&quot;ray trace&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># if any intersection</span>\n<span class=\"k\">if</span> <span class=\"n\">intersection</span><span class=\"o\">.</span><span class=\"n\">n_cells</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_mesh</span><span class=\"p\">(</span><span class=\"n\">intersection</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">&quot;green&quot;</span><span class=\"p\">,</span> <span class=\"n\">point_size</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">&quot;Intersection Points&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_legend</span><span class=\"p\">()</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">cpos</span><span class=\"o\">=</span><span class=\"s2\">&quot;yz&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#now a call to the obstruction check function</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_visibility_raytrace</span><span class=\"p\">(</span><span class=\"n\">rectangle_up</span><span class=\"p\">,</span> <span class=\"n\">rectangle_down</span><span class=\"p\">,</span> <span class=\"n\">obstacle</span><span class=\"p\">))</span>\n</code></pre></div>\n\n<p>More complex scenes can then be treated with the function <code>get_visibility_raytrace</code>.</p>\n\n<p><img src=\"https://gitlab.com/arep-dev/pyViewFactor/-/raw/3ac896fe2f420443c7c96eaa9dbbb955474e80d5/img/intersection.png?raw=true\" alt=\"Obstruction within an enclosure\" width=\"350\"/></p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>pyViewFactor can be installed from <a href=\"https://pypi.org/project/pyviewfactor/\">PyPi</a> using <code>pip</code> on Python &gt;= 3.7:</p>\n\n<pre><code>pip install pyviewfactor\n</code></pre>\n\n<p>You can also visit <a href=\"https://pypi.org/project/pyviewfactor/\">PyPi</a> or <a href=\"https://gitlab.com/arep-dev/pyViewFactor\">Gitlab</a> to download the sources. </p>\n\n<p>Requirements: </p>\n\n<pre><code>numpy==1.17.4\npandas==1.4.2\npyvista==0.35.2\nscipy==1.8.1\nnumba&gt;=0.55.2\n</code></pre>\n\n<p>The code will probably work with lower versions of the required packages, however this has not been tested.</p>\n\n<p>__Note__ - If you are alergic to <code>numba</code>, you may <code>pip install pyviewfactor==0.0.10</code> that works (and give up the x2 speed-up in view factor computation).</p>\n\n<h2 id=\"authors-and-acknowledgment\">Authors and acknowledgment</h2>\n\n<p>Mateusz BOGDAN, Edouard WALTHER, Marc ALECIAN, Mina CHAPON</p>\n\n<h2 id=\"citation\">Citation</h2>\n\n<p>There is even a <a href=\"https://www.researchgate.net/publication/360835982_Calcul_des_facteurs_de_forme_entre_polygones_-Application_a_la_thermique_urbaine_et_aux_etudes_de_confort\">conference paper</a>, showing analytical validations :</p>\n\n<blockquote>\n  <p>Mateusz BOGDAN, Edouard WALTHER, Marc ALECIAN and Mina CHAPON. _Calcul des facteurs de forme entre polygones - Application \u00e0 la thermique urbaine et aux \u00e9tudes de confort_. IBPSA France 2022, Ch\u00e2lons-en-Champagne. </p>\n</blockquote>\n\n<p>Bibtex entry:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>@inproceedings<span class=\"nb\">{</span>pyViewFactor22bogdan,\n  authors      = &quot;Mateusz BOGDAN and Edouard WALTHER and Marc ALECIAN and Mina CHAPON&quot;,\n  title        = &quot;Calcul des facteurs de forme entre polygones - Application \u00e0 la thermique urbaine et aux \u00e9tudes de confort&quot;,\n  year         = &quot;2022&quot;,\n  organization = &quot;IBPSA France&quot;,\n  venue        = &quot;Ch\u00e2lons-en-Champagne, France&quot;\n  note         = &quot;IBPSA France 2022&quot;,\n<span class=\"nb\">}</span>\n</code></pre></div>\n\n<h2 id=\"license\">License</h2>\n\n<p>MIT License - Copyright (c) AREP 2022</p>\n"}, {"fullname": "pyviewfactor.pyviewfactor", "modulename": "pyviewfactor.pyviewfactor", "type": "module", "doc": "<p>Main functions</p>\n"}, {"fullname": "pyviewfactor.pyviewfactor.fc_unstruc2poly", "modulename": "pyviewfactor.pyviewfactor", "qualname": "fc_unstruc2poly", "type": "function", "doc": "<p>Convenience conversion function from UnstructuredGrid to PolyData</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><p><strong>mesh_unstruc</strong> : <em>pyvista.UnstructuredGrid</em></p>\n\n<blockquote>\n  <p>Unstructured Pyvista Grid.</p>\n</blockquote></li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><p><em>pyvista.PolyData</em></p>\n\n<blockquote>\n  <p>The same mesh converted to a surface pyvista.PolyData.</p>\n</blockquote></li>\n</ul>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pyviewfactor</span> <span class=\"k\">as</span> <span class=\"nn\">pvf</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pyvista</span> <span class=\"k\">as</span> <span class=\"nn\">pv</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Sphere</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">center</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">subset</span> <span class=\"o\">=</span> <span class=\"n\">sphere</span><span class=\"o\">.</span><span class=\"n\">extract_cells</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">subsetPoly</span> <span class=\"o\">=</span> <span class=\"n\">fc_unstruc2poly</span><span class=\"p\">(</span><span class=\"n\">subset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">subsetPoly</span>\n<span class=\"go\">PolyData (0x1fdd9786040)</span>\n<span class=\"go\">  N Cells:    1</span>\n<span class=\"go\">  N Points:    3</span>\n<span class=\"go\">  X Bounds:    -5.551e-17, 3.617e-02</span>\n<span class=\"go\">  Y Bounds:    0.000e+00, 4.682e-02</span>\n<span class=\"go\">  Z Bounds:    -5.000e-01, -4.971e-01</span>\n<span class=\"go\">  N Arrays:    0</span>\n</code></pre></div>\n", "signature": "(mesh_unstruc)", "funcdef": "def"}, {"fullname": "pyviewfactor.pyviewfactor.get_visibility", "modulename": "pyviewfactor.pyviewfactor", "qualname": "get_visibility", "type": "function", "doc": "<p>Facets visibility:</p>\n\n<p>A test to check if two facets can \"see\" each other, taking the normals \ninto consideration (no obstruction tests, only normals orientations).</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><p><strong>c1</strong> : <em>pyvista.PolyData</em></p>\n\n<blockquote>\n  <p>PolyData facet (pyvista format).</p>\n</blockquote></li>\n<li><p><strong>c2</strong> : <em>pyvista.PolyData</em></p>\n\n<blockquote>\n  <p>PolyData facet (pyvista format).</p>\n</blockquote></li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><p><em>bool</em></p>\n\n<blockquote>\n  <p>True is the facets \"see\" each other, False else.</p>\n</blockquote></li>\n</ul>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pyvista</span> <span class=\"k\">as</span> <span class=\"nn\">pv</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pyviewfactor</span> <span class=\"k\">as</span> <span class=\"nn\">pvf</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tri1</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Triangle</span><span class=\"p\">([[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">],[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">],[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tri2</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Triangle</span><span class=\"p\">([[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">get_visibility</span><span class=\"p\">(</span><span class=\"n\">tri1</span><span class=\"p\">,</span> <span class=\"n\">tri2</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre></div>\n", "signature": "(c1, c2)", "funcdef": "def"}, {"fullname": "pyviewfactor.pyviewfactor.get_visibility_raytrace", "modulename": "pyviewfactor.pyviewfactor", "qualname": "get_visibility_raytrace", "type": "function", "doc": "<p>Raytrace between face1 and face2</p>\n\n<p>A test to check if there is an obstruction between two facets.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><p><strong>face1</strong> : <em>pyvista.PolyData</em></p>\n\n<blockquote>\n  <p>face1 to be checked for obstruction.</p>\n</blockquote></li>\n<li><p><strong>face2</strong> : <em>pyvista.PolyData</em></p>\n\n<blockquote>\n  <p>face2 to be checked for obstruction.</p>\n</blockquote></li>\n<li><p><strong>obstacle</strong> : <em>pyvista.PolyData</em></p>\n\n<blockquote>\n  <p>The mesh inbetween, composing the potential obstruction.</p>\n</blockquote></li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><p><em>bool</em></p>\n\n<blockquote>\n  <p>True if no obstruction, False else.</p>\n</blockquote></li>\n</ul>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pyvista</span> <span class=\"k\">as</span> <span class=\"nn\">pv</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pyviewfactor</span> <span class=\"k\">as</span> <span class=\"nn\">pvf</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tri1</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Triangle</span><span class=\"p\">([[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">],[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">],[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tri2</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Triangle</span><span class=\"p\">([[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">obstacle</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Circle</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"mf\">3.0</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">obstacle</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">],</span> <span class=\"n\">inplace</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">get_visibility_raytrace</span><span class=\"p\">(</span><span class=\"n\">tri2</span><span class=\"p\">,</span> <span class=\"n\">tri1</span><span class=\"p\">,</span> <span class=\"n\">obstacle</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre></div>\n", "signature": "(face1, face2, obstacle)", "funcdef": "def"}, {"fullname": "pyviewfactor.pyviewfactor.trunc", "modulename": "pyviewfactor.pyviewfactor", "qualname": "trunc", "type": "function", "doc": "<p>Return values with <em>decs</em> decimals. </p>\n\n<p>A function to truncate decimals in floats.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><p><strong>values</strong> : <em>float</em>, or <em>numpy.array</em> (floats)</p>\n\n<p>A float value with decimals, or a numpy.array of floats</p></li>\n<li><p><strong>decs</strong> : <em>int</em>, optional</p>\n\n<p>The number of decimals to keep. The default is 0.</p></li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><p><em>float</em></p>\n\n<blockquote>\n  <p>The same flaot truncated with <em>decs</em> decimals, or a the same\n  numpy.array of floats truncated.</p>\n</blockquote></li>\n</ul>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pyvista</span> <span class=\"k\">as</span> <span class=\"nn\">pv</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pyviewfactor</span> <span class=\"k\">as</span> <span class=\"nn\">pvf</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mf\">1.23456789</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">trunc</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">1.23</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tri1</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Triangle</span><span class=\"p\">([[</span><span class=\"mf\">0.111111</span><span class=\"p\">,</span> <span class=\"mf\">1.111111</span><span class=\"p\">,</span> <span class=\"mf\">1.111111</span><span class=\"p\">],</span>\n<span class=\"go\">                    [1.222222, 1.222222, 1.222222],</span>\n<span class=\"go\">                    [1.333333, 0.333333, 1.333333]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">trunc</span><span class=\"p\">(</span><span class=\"n\">tri1</span><span class=\"o\">.</span><span class=\"n\">points</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">pyvista_ndarray([[0.11, 1.11, 1.11],</span>\n<span class=\"go\">                 [1.22, 1.22, 1.22],</span>\n<span class=\"go\">                 [1.33, 0.33, 1.33]])</span>\n</code></pre></div>\n", "signature": "(values, decs=0)", "funcdef": "def"}, {"fullname": "pyviewfactor.pyviewfactor.integrand", "modulename": "pyviewfactor.pyviewfactor", "qualname": "integrand", "type": "function", "doc": "<p>Return the integrand for a pair of edges of two facets for the view factor\ncomputation.</p>\n\n<p>Used in the <em>compute_viewfactor</em> function.</p>\n", "signature": "(\n    x,\n    y,\n    norm_q_carree,\n    norm_p_carree,\n    scal_qpq,\n    scal_qpp,\n    scal_pq,\n    norm_qp_carree\n)", "funcdef": "def"}, {"fullname": "pyviewfactor.pyviewfactor.compute_viewfactor", "modulename": "pyviewfactor.pyviewfactor", "qualname": "compute_viewfactor", "type": "function", "doc": "<p>View factor computation between cell1 and cell2</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><p><strong>cell_1</strong> : <em>pyvista.PolyData</em> facet</p>\n\n<blockquote>\n  <p>The first cell.</p>\n</blockquote></li>\n<li><p><strong>cell_2</strong> : <em>pyvista.PolyData</em> facet</p>\n\n<blockquote>\n  <p>The second cell.</p>\n</blockquote></li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><p><em>float</em></p>\n\n<blockquote>\n  <p>The view factor from <strong>cell_2</strong> to <strong>cell_1</strong>.</p>\n</blockquote></li>\n</ul>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pyvista</span> <span class=\"k\">as</span> <span class=\"nn\">pv</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pyviewfactor</span> <span class=\"k\">as</span> <span class=\"nn\">pvf</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tri1</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Triangle</span><span class=\"p\">([[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">],[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">],[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tri2</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Triangle</span><span class=\"p\">([[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pvf</span><span class=\"o\">.</span><span class=\"n\">compute_viewfactor</span><span class=\"p\">(</span><span class=\"n\">tri1</span><span class=\"p\">,</span> <span class=\"n\">tri2</span><span class=\"p\">)</span>\n<span class=\"go\">0.07665424316999997</span>\n</code></pre></div>\n", "signature": "(cell_1, cell_2)", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();